import kagglehub

path = kagglehub.dataset_download("lainguyn123/student-performance-factors")

print("Path to dataset files:", path)
  import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.pipeline import Pipeline
df = pd.read_csv('/content/StudentPerformanceFactors.csv')
  # Data Exploration
print("Dataset Shape:", df.shape)
print("\nFirst 5 rows:")
print(df.head())
print("\nDataset Info:")
print(df.info())
print("\nBasic Statistics:")
print(df.columns)
# 2. Check for missing values
print("\nMissing values:")
print(df.isnull().sum())
print(df.describe


if df.isnull().sum().any():
    df = df.dropna()
    print("Dropped rows with missing values")
  # 3. Simple Visualization
plt.figure(figsize=(12, 4))
# Plot 1: Study hours vs scores
plt.subplot(1, 2, 1)
plt.scatter(df['Hours_Studied'], df['Exam_Score'], alpha=0.6)
plt.title('Hours Studied vs Exam Scores')
plt.xlabel('Hours Studied')
plt.ylabel('Exam Score')
# Plot 2: Distribution of scores
plt.subplot(1, 2, 2)
plt.hist(df['Exam_Score'], bins=15, color='skyblue', edgecolor='black')
plt.title('Distribution of Exam Scores')
plt.xlabel('Scores')
plt.ylabel('Frequency')
# 4. Prepare data for modeling
# Using only Hours_Studied as the feature
X = df[['Hours_Studied']]  # Feature matrix
y = df['Exam_Score']       # Target variable
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)
# 5. Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)
  # 6. Make predictions
y_pred = model.predict(X_test)
# 7. Evaluate the model
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)
# 8. Visualize the results
plt.figure(figsize=(10, 6))

# Plot actual vs predicted values
plt.scatter(X_test, y_test, color='blue', alpha=0.7, label='Actual Scores')
plt.scatter(X_test, y_pred, color='red', alpha=0.7, label='Predicted Scores')
  # Plot the regression line
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')

plt.title('Linear Regression: Hours Studied vs Exam Scores')
plt.xlabel('Hours Studied')
plt.ylabel('Exam Score')
plt.legend()
plt.show()
  # 9. Show the regression equation
slope = model.coef_[0]
intercept = model.intercept_

print(f"\nRegression Equation: Exam Score = {intercept:.2f} + {slope:.2f} * Hours Studied")
# 10. Make a prediction for a specific study time
study_time = 5  # hours
predicted_score = model.predict([[study_time]])[0]
print(f"\nPredicted score for {study_time} hours of study: {predicted_score:.2f}")
  # 11. Check the correlation between Hours_Studied and Exam_Score
correlation = df['Hours_Studied'].corr(df['Exam_Score'])
print(f"\nCorrelation between Hours Studied and Exam Score: {correlation:.2f}")
